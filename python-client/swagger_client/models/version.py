# coding: utf-8

"""
    Tigerblood

    IP Reputation Service API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Version(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, commit=None, version=None, source=None, build=None):
        """
        Version - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'commit': 'str',
            'version': 'str',
            'source': 'str',
            'build': 'str'
        }

        self.attribute_map = {
            'commit': 'commit',
            'version': 'version',
            'source': 'source',
            'build': 'build'
        }

        self._commit = commit
        self._version = version
        self._source = source
        self._build = build

    @property
    def commit(self):
        """
        Gets the commit of this Version.
        commit of the service running

        :return: The commit of this Version.
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """
        Sets the commit of this Version.
        commit of the service running

        :param commit: The commit of this Version.
        :type: str
        """

        self._commit = commit

    @property
    def version(self):
        """
        Gets the version of this Version.
        tag of the service running

        :return: The version of this Version.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Version.
        tag of the service running

        :param version: The version of this Version.
        :type: str
        """

        self._version = version

    @property
    def source(self):
        """
        Gets the source of this Version.
        project username and repo

        :return: The source of this Version.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Version.
        project username and repo

        :param source: The source of this Version.
        :type: str
        """

        self._source = source

    @property
    def build(self):
        """
        Gets the build of this Version.
        circle build URL

        :return: The build of this Version.
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """
        Sets the build of this Version.
        circle build URL

        :param build: The build of this Version.
        :type: str
        """

        self._build = build

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
